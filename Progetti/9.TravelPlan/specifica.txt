Specifica tipi di dato:
1.	Laddr: tipo composto (via: stringa, numeroCivico: int>0)
2.	Addr: stringa secondo regex
3.	tipoDurata: tipo composto (ore: int>0, minuti: 0..59)
4.	cod : stringa secondo regex
5.	tipoMese: enumerativo ('gen', 'feb', 'mar', 'apr', 'mag', 'giu', 'lug', 'ago', 'set', 'ott', 'nov', 'dic')

-----------------------------

Specifica Classe Utente
	vincoli Esterni:
1.		[V.Utente.non_valuta_suo_viaggio]
		ALL u,v organizza(u,v) -> not exist vo Partecipa(u,v,vo)

2.		[V.Utente.Non_partecipa_a_viaggi_intrecciati]
		ALL v1,i1,f1,v2,i2,f2,u 
			Viaggio(v1) and Viaggio(v2) and inizio(v1,i1) and inizio(v2,i2) and fine(v1,f1) and fine(v2,f2) ->
				i2 > f1 or i1 > f2

3.		[V.Utente.NonPartecipa_attività_sovreapposte]
		ALL u,a1,a2,i1,i2,d1,d2
			at_ut(a1,u) and at_ut(a2,u) and inizio(a1,i1) and inizio(a2,i2) and fine(a1,d1) and fine(a2,d2) ->
				i1 > d2 or i2 > d1

	operazioni:
1.		punteggio():
		preCondizioni: EXIST v organizza(.this,v) and
							 exist u,vo voto(u,v,vo)
		postCondizioni:
			A = {a | u,v exist organizza(.this,v) and voto(u,v,a)}
			N = {a | u,v exist organizza(.this,v) and voto(u,v,a) and a >= 4}
			sommatoria su A / |A| <= 3 -> result = 0
			and
			result = parte intera inferiore (0.1 * |N|)

Specifica Classe Attività
	Vincoli Esterni:
1.		[V.Attività.FineDopoDiInizio]
		ALL a,i,f
		Attività(a) and fine(a,f) and inizio(a,i) -> i <= f

2.		[V.Attività.nonIntrecciare_attività_in_attività_composta]
		ALL c,s1,s2,i1,d1,i2,d2
		co_se(c,s1) and co_se(c,s2) and inizio(s1,i1) and inizio(s2,i2) and fine(s1,d1) and fine(s2,d2) -> 
			i1 > d2 or i2 > d1

3.		[V.Attività.Pernottamento_non_in_Composta]
		ALL c,s co_se(c,s) -> not pernottamento(s)

4.		[V.Attività.NonPiùDiUnPernottamentoANottePerPersona]
		ALL a1,a2,u,d1,d2,t1,t2 
		Attività(a1) and Pernottamento(a1) and p1 = true and pernottamento(a2) and inizio(a1,t1) and inizio(a2,t2) and date(t2,d2) date(t1,d1) and d1 = d2 -> 
			not (at_ut(a1,u) and at_ut(a2,u))

5.		[V.Coerenza_utente_viaggio_attività]
		ALL u,a,v at-ut(u,a) and at_vi(a,v) -> Partecipa(u,v)

6.		[V.Se_è_in_composta_non_ha_utenti]
		ALL s,c co_se(c,s) -> not Exist u at_ut(s,u)

7.		[V.Attività.Tipologia_sesolose_no_pernottamento]
		ALL s,p Pernottamento(s,p) and p = true <-> Exist t at_ti(s,t)

8.		[V.Attività.SempliceInCompostaNonHaCollegamentiConViaggio]
		ALL a,c co_se(c,a) -> not exist v at_vi(a,v)

	operazioni:
1.		prezzo(): float >= 0
		preCondizioni: nessuna
		postCondizioni: A = {p | exist sco_se(.this,s) and prezzo(s,p)}
		res = sommatoria su A

2.		inizio(): datetime >= 0
		preCondizioni: 
		ALL c,s1,s2,i1,d1,i2,d2
		co_se(c,s1) and co_se(c,s2) and inizio(s1,i1) and inizio(s2,i2) and durata(s1,d1) and durata(s2,d2) -> 
			i1 + d1 < i2 or i2 + d2 < i1
		postCondizioni: A = {p | exist sco_se(.this,s) and inizio(s,p)}
		x | x in A and not exist y y<x and y in A
		res = x

3.		durata(): tipoDurata  
		preCondizioni: nessuna
		postCondizioni: A = {p | exist sco_se(.this,s) and durata(s,p)}
		res = sommatoria su A

Specifica Classe Semplice
	operazioni:
1.		fine():
		precondizioni:
		nessuna
		postCondizioni:
			i | inizio(.this,i)
			d | durata(.this,d)
		result = i + d

Specifica Classe Composta
	operazioni:
1.		fine():
		preCondizioni:
			nessuna
		postCondizioni:
			A = {a | co_se(.this,a)}
			result | exist f result in A and fine(result,f) and not exist a,f2 a in A and fine(a,f2) and f2>f

Specifica Classe Viaggio
	Vincoli Esterni:
1.		[V.Viaggio.minP<maxP]
		ALL m,M,v maxP(v,M) and minP(v,m) -> m < M

2.		[V.Viaggio.inizio<fine]
		ALL v,i,f inizio(v,i) and fine(v,f) -> i<f

3.		[V.Viaggio.no_Overbooking]
		ALL v,m Viaggio(v) and maxP(v,m) -> 
			|{u | Partecipa(u,v)}| <= m

4. 		[V.Viaggio.inizio_fine_attività_entro_Viaggio]
		ALL v,i,f Viaggio(v) and inizio(v,i) and fine(v,f) -> not exist a,i1,f1 Attività(a) and inizio(a,i1) and fine(a,f1) and at_vi(a,v) and 
			(i1<i or f1>f)
-----------------------------

Specifica Use-Case
	use-case Stats
1.	stats(): (tipoMese, int>=0)[12]
	precondizioni:
		nessuna
	postCondizioni:
	Result = {m,i | all m tipoMese(m) and statslocale(m,i)}

1.1	statsLocale(m: tipoMese): int>=0
	precondizioni:
		nessuna
	postCondizioni:
		A = {a | exist i,me Viaggio(a) and inizio(a,i) and mese(i,me) and and me = m and (now() - 12mesi < i)}
		result = |A|

2.	use-case Ricerca
	ricerca1.4(dataI: date, dataF: date, r: Regione, n: Nazione): int>=0
	preCondizioni:
	    dateI<dateF and na_re(n,r)
	postCondizioni:
		A = {v | (exist a,l,c
			 at_vi(a,v) and lu_st(l,a) and ci_lu(c,l) and ci_re(c,r)) or (exist a,l,c at_vi(a,v) and arrivo(l,a) and ci_lu(c,l) and ci_re(c,r)) and 
			 exist i inizio(a,i) and dataI < i < dataF}
		result = A

3.  ricerca1.5(min: float >= 0, max: float >= 0, r: Regione[0..*], dataI: date, dataF: date, punti: int >= 0)
    preCondizioni:
    	min<max and dataI<dataF
    postCondizioni:
   		A = {v |exist a,i,f Viaggio(v) and inizio(v,i) and fine(v,f) and dataI <= i <= f <= dataF and at_vi(a,v) and l,c
			 at_vi(a,v) and lu_st(l,a) and ci_lu(c,l) and ci_re(c,r)) or (exist a,l,c at_vi(a,v) and arrivo(l,a) and ci_lu(c,l) and ci_re(c,r)) and exist u,p organizza(u,v) and
			 punteggio(u,p) and p >= punti and exist pr prezzo(c,pr) and min<=pr<=max}
		result = A

4.	ricerca1.3(dataI:date,dataF:date):Città[0..*]
5.	ricerca1.2(d:città,dateI:date,dataF:date): Viaggio[0..*]

	use-case organizza
1.	creaViaggio(nome: stringa, minP: int>0, maxP: int>0, a: Attività[0..*]): Viaggio
2.	aggiungiAttività(v: Viaggio, a: Attività): Viaggio
3.	creaAttivitàComposta(nome: stringa, a: Attività[2..*]): Composta
4.	creaAttivitàStatica(nome: stringa, prezzo: float>=0, inizio: dataora, durata: tipoDurata, a: Luogo): Statica
5.	creaAttivitàStatica(nome: stringa, prezzo: float>=0, inizio: dataora, durata: tipoDurata, a: Luogo, p:Luogo): Spostamento
6.	creaAttivitàPernottamento(nome: stringa, prezzo: float>=0, inizio: dataora, durata: tipoDurata, a: Luogo): Pernottamento

	use-case partecipa
1.	partecipa(v: Viaggio)

	use-case registrati
1.	registrazione(n: stringa, cognome: stringa, indirizzomail: Addr): Utente

	use-case valuta
1.	valutazione(v: 1..5, v: Viaggio): Partecipa


Continua in "parte2.txt" con ristrutturazione --->