specifica tipi di dato:
	TipoSesso : enum{m,f}

specifica Classe Utente
	operazioni:
	etÃ (): int>=0
	preCondizioni: 
		nessuna
	postCondizioni:
		d | dataDiNascita(.this,d)
		n | date(now(),n)
		result = n - d

-------------------

	ospitabili(): int>0[0..1]
	preCondizioni:
		exist s Stanza AND ut_sta(.this,s)
	postCondizioni:
		P = {n | EXIST p,s po_st(p,s) AND ut_sta(.this,s) ANS numeroPosti(p,n)}
		result = sommatoria su P

-------------------

	disponibile(dataI: date, dataF: date): bool
	preCondizioni:
		dataI >= dataF AND dataI >= now()
	postCondizioni:
		Not Exist p,i,f nd_ut(p,.this) AND dataI(p,i) AND dataF(p,f) AND 
				((dataI <= i AND i <= dataF) OR (dataI <= f AND dataF >= f) OR (i >= dataI AND f <= dataF)) ->
				result = True

		AND

		result = False

specifica classe Richiesta:
	vincoli esterni:

1.	[V.Richiesta.coerenzaPostiLetto]
	ALL r,p,u richiedonoa(u,r) AND po_ri(p,r) -> EXIST s po_st(p,s) AND ut_sta(u,s)

2.	[V.Richiesta.nonVaADormireACasaSua]
	ALL u,r ut_ri(u,r) -> NOT richiedonoa(u,r)

3. 	[V.Richiesta.datai<dataf]
	ALL r,i,f dataI(r,i) and dataF(r,f) -> i<=f

specifica classe PeriodoND
1.  [V.PeriodoND.dataI<=dataF]
	ALL p,i,f dataI(p,i) AND dataF(p,f) -> i <= f

2.	[V.PeriodoND.nonIntersecare]
	ALL p,i,f,p2,i2,f2 dataI(p,i) and dataI(p2,i2) and dataF(p,f) and dataF(p2,f2) and PeriodoND(p) and PeriodoND(p2) ->
		i<i2 or f>f2 

specifica classe Utente

1.  [V.Utente.nasce_poi_fa_altro]
	ALL u,d dataDiNascita(u,d) -> 
		(NOT EXIST r,di Richiesta(r) and dataI(r,di) and di<d) AND (NOT EXIST p,di2 dataI(p,di2) and PeriodoND(p) and di2 < d)